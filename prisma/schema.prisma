generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum weapons_type {
  melee
  ranged
  magic
}

enum items_type {
  weapon
  armor
  potion
  item
}

enum spells_type {
  heal
  damage
}

model armors {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  item_id    Int       @db.UnsignedInt
  base       Int       @db.SmallInt
  additional Boolean
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  items      items     @relation(fields: [item_id], references: [id], onDelete: Cascade, map: "armors_item_id_foreign")

  @@index([item_id], map: "armors_item_id_foreign")
}

model items {
  id           Int            @id @default(autoincrement()) @db.UnsignedInt
  name         String
  type         items_type     @default(item)
  armors       armors[]
  player_items player_items[]
  potions      potions[]
  weapons      weapons[]
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String
  batch     Int
}

model player_items {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  player_id  Int       @db.UnsignedInt
  item_id    Int       @db.UnsignedInt
  quantity   Int       @default(1)
  equipped   Boolean   @default(false)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  items      items     @relation(fields: [item_id], references: [id], onDelete: Cascade, map: "player_items_item_id_foreign")
  players    players   @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "player_items_player_id_foreign")

  @@index([item_id], map: "player_items_item_id_foreign")
  @@index([player_id], map: "player_items_player_id_foreign")
}

model player_spells {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  player_id  Int       @db.UnsignedInt
  spell_id   Int       @db.UnsignedInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  players    players   @relation(fields: [player_id], references: [id], onDelete: Cascade, map: "player_spells_player_id_foreign")
  spells     spells    @relation(fields: [spell_id], references: [id], onDelete: Cascade, map: "player_spells_spell_id_foreign")

  @@index([player_id], map: "player_spells_player_id_foreign")
  @@index([spell_id], map: "player_spells_spell_id_foreign")
}

model players {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String
  strength      Int             @db.SmallInt
  dexterity     Int             @db.SmallInt
  constitution  Int             @db.SmallInt
  intelligence  Int             @db.SmallInt
  wisdom        Int             @db.SmallInt
  charisma      Int             @db.SmallInt
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  player_items  player_items[]
  player_spells player_spells[]
}

model potions {
  id         Int       @id @default(autoincrement()) @db.UnsignedInt
  item_id    Int       @db.UnsignedInt
  dices      String
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  items      items     @relation(fields: [item_id], references: [id], onDelete: Cascade, map: "potions_item_id_foreign")

  @@index([item_id], map: "potions_item_id_foreign")
}

model spells {
  id            Int             @id @default(autoincrement()) @db.UnsignedInt
  name          String
  energy_cost   Int             @db.SmallInt
  dices         String
  type          spells_type     @default(damage)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  player_spells player_spells[]
}

model weapons {
  id         Int          @id @default(autoincrement()) @db.UnsignedInt
  item_id    Int          @db.UnsignedInt
  type       weapons_type @default(melee)
  dices      String
  created_at DateTime?    @db.Timestamp(0)
  updated_at DateTime?    @db.Timestamp(0)
  items      items        @relation(fields: [item_id], references: [id], onDelete: Cascade, map: "weapons_item_id_foreign")

  @@index([item_id], map: "weapons_item_id_foreign")
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}
